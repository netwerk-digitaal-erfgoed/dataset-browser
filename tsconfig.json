{
  "compilerOptions": {
    "target": "es2020", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "module": "commonjs", /* Specify what module code is generated. */
    "rootDirs": [
      "./src"
    ], /* Allow multiple folders to be treated as one when resolving modules. */
    "resolveJsonModule": true, /* Enable importing .json files. */
    "outDir": "./build", /* Specify an output folder for all emitted files. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true, /* When type checking, take into account 'null' and 'undefined'. */
    "skipLibCheck": true, /* Skip type checking all .d.ts files. */
    "noUnusedLocals": false /* Report errors on unused locals. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,
    "exactOptionalPropertyTypes": true /* don't allow `foo.bar = undefined` for `const foo: {bar?: string}` */,
    "noPropertyAccessFromIndexSignature": true /* don't allow `foo.bar` for `const foo: {[key: string]: string}` use foo["bar"] instead */,
    "jsx": "preserve",
    "incremental": true,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "noEmit": true,
    "moduleResolution": "node",
    "isolatedModules": true
  },
  "include": [
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}
